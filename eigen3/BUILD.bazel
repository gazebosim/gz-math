load(
    "@gz//bazel/skylark:build_defs.bzl",
    "GZ_ROOT",
    "GZ_VISIBILITY",
    "gz_include_header",
)

package(default_applicable_licenses = [GZ_ROOT + "math:license"])

public_headers = glob([
    "include/gz/math/eigen3/*.hh",
])

gz_include_header(
    name = "eigen3_hh_genrule",
    out = "include/gz/math/eigen3.hh",
    hdrs = public_headers,
)

cc_library(
    name = "eigen3",
    hdrs = ["include/gz/math/eigen3.hh"],
    includes = ["include"],
    visibility = GZ_VISIBILITY,
    deps = [
        ":Conversions",
        ":Util",
        GZ_ROOT + "math",
        "@eigen3",
    ],
)

cc_library(
    name = "Conversions",
    hdrs = ["include/gz/math/eigen3/Conversions.hh"],
    includes = ["include"],
    deps = [
        GZ_ROOT + "math:AxisAlignedBox",
        GZ_ROOT + "math:Matrix3",
        GZ_ROOT + "math:Matrix6",
        GZ_ROOT + "math:Pose3",
        GZ_ROOT + "math:Quaternion",
        GZ_ROOT + "math:Vector3",
        "@eigen3",
    ],
)

cc_test(
    name = "Conversions_TEST",
    srcs = ["src/Conversions_TEST.cc"],
    deps = [
        ":Conversions",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)

cc_library(
    name = "Util",
    hdrs = ["include/gz/math/eigen3/Util.hh"],
    includes = ["include"],
    deps = [
        ":Conversions",
        GZ_ROOT + "math:AxisAlignedBox",
        GZ_ROOT + "math:Matrix3",
        GZ_ROOT + "math:OrientedBox",
        GZ_ROOT + "math:Pose3",
        GZ_ROOT + "math:Quaternion",
        GZ_ROOT + "math:Vector3",
        "@eigen3",
    ],
)

cc_test(
    name = "Util_TEST",
    srcs = ["src/Util_TEST.cc"],
    deps = [
        ":Util",
        "@gtest",
        "@gtest//:gtest_main",
    ],
)
